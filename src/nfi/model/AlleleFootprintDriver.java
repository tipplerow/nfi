
package nfi.model;

import jam.app.JamApp;
import jam.app.JamLogger;
import jam.app.JamProperties;
import jam.io.IOUtil;

import jene.neo.PeptidePairTable;
import jene.tcga.TumorGenotypeTable;

/**
 * Computes allele footprint index scores for a patient cohort.
 */
public final class AlleleFootprintDriver extends JamApp {
    private final String peptidePairFile;
    private final String tumorPatientFile;
    private final String patientGenotypeFile;

    private PeptidePairTable peptidePairTable;
    private TumorGenotypeTable tumorGenotypeTable;

    private AlleleFootprintDriver(String... propFiles) {
        super(propFiles);

        this.peptidePairFile = resolvePeptidePairFile();
        this.tumorPatientFile = resolveTumorPatientFile();
        this.patientGenotypeFile = resolvePatientGenotypeFile();
    }

    private static String resolvePeptidePairFile() {
        return JamProperties.getRequired(PEPTIDE_PAIR_FILE_PROPERTY);
    }

    private static String resolvePatientGenotypeFile() {
        return JamProperties.getRequired(PATIENT_GENOTYPE_FILE_PROPERTY);
    }

    private static String resolveTumorPatientFile() {
        return JamProperties.getRequired(TUMOR_PATIENT_FILE_PROPERTY);
    }

    /**
     * Name of the system property that specifies the full path name
     * of the input file mapping patients to their HLA genotypes.
     */
    public static final String PATIENT_GENOTYPE_FILE_PROPERTY = "AlleleFootprintDriver.patientGenotypeFile";

    /**
     * Name of the system property that specifies the full path name
     * of the input file containing neo/self-peptide pairs.
     */
    public static final String PEPTIDE_PAIR_FILE_PROPERTY = "AlleleFootprintDriver.peptidePairFile";

    /**
     * Name of the system property that specifies the full path name
     * of the input file mapping tumor barcodes to patient idenifiers.
     */
    public static final String TUMOR_PATIENT_FILE_PROPERTY = "AlleleFootprintDriver.tumorPatientFile";

    /**
     * Processes a MAF file and resolves the self/neo-peptide pairs
     * generated by missense mutations.
     *
     * @param propFiles files containing the system properties that
     * define the runtime environment.
     *
     * @throws RuntimeException if any errors occur.
     */
    public static void run(String... propFiles) {
        AlleleFootprintDriver driver = new AlleleFootprintDriver(propFiles);
        driver.run();
    }

    private void run() {
        peptidePairTable = PeptidePairTable.load(peptidePairFile);
        tumorGenotypeTable = TumorGenotypeTable.load(tumorPatientFile, patientGenotypeFile);

        JamLogger.info("DONE!");
    }
    /*
    private void writePeptidePairRecords() {
        IOUtil.writeLines(peptidePairFile, false, PeptidePairRecord.header());
        IOUtil.writeObjects(peptidePairFile, true, peptidePairRecords, record -> record.format());
    }
    */
    private static void usage() {
        System.err.println("Usage: jam.neo.AlleleFootprintDriver PROP_FILE1 [PROP_FILE2 ...]");
        System.exit(1);
    }

    public static void main(String[] args) {
        if (args.length < 1)
            usage();

        run(args);
    }
}
